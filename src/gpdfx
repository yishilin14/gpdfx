#!/usr/bin/env python
#
# Copyright (C) 2011 Christoph Lehner, Nathan Goldschmidt
#
#    v1[Lehner]:      Original version
#    v2[Goldschmidt]: Use expanduser, expandvars.  Use self.fn instead of fn.
#    v3[Lehner]:      Use self.fn in argument of exportPdf.
#
# Copyright (C) 2016 Yishi Lin
#
# All programs in this directory and subdirectories are published under the GNU
# General Public License as described below.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA
#
# Further information about the GNU GPL is available at:
# http://www.gnu.org/copyleft/gpl.ja.html

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Poppler', '0.18')
from gi.repository import Poppler, Gtk, Gdk
import sys, os
import cairo

class Poprender(object):
    def __init__(self):
        self.fn = os.path.expanduser(sys.argv[1])
        self.fn = os.path.expandvars(self.fn)
        self.fn = os.path.abspath(self.fn)
        uri = "file://" + self.fn

        try:
            self.document = Poppler.Document.new_from_file (uri, None)
        except:
            sys.exit(1)

        self.n_pages = self.document.get_n_pages()

        self.current_page = self.document.get_page(0)
        self.n_page = 1
        self.width, self.height = self.current_page.get_size()

        self.scale = 1
        self.sel = False

        self.win = Gtk.Window()
        self.win.set_default_size(600, 600)
        self.win.set_title(self.fn)
        self.win.connect("delete-event", Gtk.main_quit)

        adjust = Gtk.Adjustment(1, 1, self.n_pages, 1, 5)
        page_selector = Gtk.SpinButton()
        page_selector.set_adjustment(adjust)
        page_selector.connect("value-changed", self.on_changed)

        lab = Gtk.Label('Page')

        hbox = Gtk.HBox(False, 0)

        vbox = Gtk.VBox(False, 0)
        vbox.pack_start(hbox, False, False, 0)

        hbox.pack_start(lab, False, False, 4)
        hbox.pack_start(page_selector, False, False, 0)

        adjust = Gtk.Adjustment(100, 25, 400, 25, 100)
        scale_selector = Gtk.SpinButton()
        scale_selector.set_adjustment(adjust)
        scale_selector.connect("value-changed", self.on_scale_changed)

        lab = Gtk.Label('Zoom/%')

        hbox.pack_start(lab, False, False, 4)
        hbox.pack_start(scale_selector, False, False, 0)

        b_scan_fonts = Gtk.Button('Selection to PDF')
        b_scan_fonts.connect("clicked", self.on_export)

        b_clear_sel = Gtk.Button('Clear Selection')
        b_clear_sel.connect("clicked", self.on_clear_sel)

        hbox.pack_start(b_clear_sel, False, False, 4)
        hbox.pack_start(b_scan_fonts, False, False, 0)

        self.sw = Gtk.ScrolledWindow()
        self.sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)

        self.dwg = Gtk.DrawingArea()
        self.dwg.set_size_request(int(self.width), int(self.height))
        self.dwg.connect("draw", self.on_expose)

        self.sw.connect("button-press-event", self.on_btn_down)
        self.sw.connect("button-release-event", self.on_btn_up)
        self.sw.connect("motion-notify-event", self.on_mouse_move)

        eventbox = Gtk.EventBox()
        eventbox.add(self.dwg)

        self.sw.add_with_viewport(eventbox)
        self.dwg.modify_bg(Gtk.StateFlags.NORMAL,
                           Gdk.Color(50000,50000,50000))

        vbox.pack_start(self.sw, True, True, 0)

        self.win.add(vbox)
        self.win.show_all()

        self.sel_x=0
        self.sel2_x=0
        self.sel_y=0
        self.sel2_y=0
        self.btn_down=False

    def sel_pos_clip(self):
        if self.sel_x>self.width:
            self.sel_x=self.width
        if self.sel2_x>self.width:
            self.sel2_x=self.width
        if self.sel_y>self.height:
            self.sel_y=self.height
        if self.sel2_y>self.height:
            self.sel2_y=self.height

        if self.sel_x<0:
            self.sel_x=0
        if self.sel2_x<0:
            self.sel2_x=0
        if self.sel_y<0:
            self.sel_y=0
        if self.sel2_y<0:
            self.sel2_y=0

    def on_btn_down(self, widget, event):
        self.sel_x=event.x/self.scale
        self.sel_y=event.y/self.scale
        self.sel2_x=event.x/self.scale
        self.sel2_y=event.y/self.scale
        self.sel_pos_clip()
        self.sel = True
        self.btn_down = True

    def on_btn_up(self, widget, event):
        self.sel2_x=event.x/self.scale
        self.sel2_y=event.y/self.scale
        self.sel_pos_clip()
        self.dwg.queue_draw()
        self.btn_down = False 

    def on_mouse_move(self, widget, event):
        if self.btn_down:
            self.sel2_x=event.x/self.scale
            self.sel2_y=event.y/self.scale
            self.sel_pos_clip()
            self.dwg.queue_draw()

    def on_changed(self, widget):
        self.n_page = widget.get_value_as_int()
        self.current_page = self.document.get_page(widget.get_value_as_int()-1)
        self.width, self.height = self.current_page.get_size()
        self.dwg.set_size_request(int(self.width*self.scale),
                                  int(self.height*self.scale))
        self.dwg.queue_draw()

    def on_scale_changed(self, widget):
        self.scale = widget.get_value_as_int()/100.0
        self.dwg.set_size_request(int(self.width*self.scale),
                                  int(self.height*self.scale))
        self.dwg.queue_draw()

    def cr_draw(self,cr,width,height,scale):
        if scale != 1:
            cr.scale(scale, scale)
        cr.set_source_rgb(1, 1, 1)
        cr.rectangle(0, 0, width, height)
        cr.fill()
        self.current_page.render(cr)

        if self.sel:
            cr.set_source_rgba(0, 0, 0.5, 0.9)
            cr.set_line_width(1)
            cr.rectangle(self.sel_x,self.sel_y,self.sel2_x-self.sel_x,
                         self.sel2_y-self.sel_y)
            cr.stroke_preserve()
            cr.set_source_rgba(0, 0, 1, 0.2)
            cr.fill()

    def on_expose(self, widget, event):
        cr = widget.get_property('window').cairo_create()
        self.cr_draw(cr,self.width,self.height,self.scale)

    def on_clear_sel(self, widget):
        self.sel = False
        self.dwg.queue_draw()

    def on_export(self, widget):
        if self.sel:

            if self.sel_x>self.sel2_x:
                tmp=self.sel_x
                self.sel_x=self.sel2_x
                self.sel2_x=tmp

            if self.sel_y>self.sel2_y:
                tmp=self.sel_y
                self.sel_y=self.sel2_y
                self.sel2_y=tmp

            ch = Gtk.FileChooserDialog("Filename for selection PDF",None,
                                       Gtk.FileChooserAction.SAVE,
                                       (Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,
                                        Gtk.STOCK_OPEN,Gtk.ResponseType.OK))
            ch.set_do_overwrite_confirmation(True)
            fnout = None
            if ch.run() == Gtk.ResponseType.OK:
                fnout = ch.get_filename()
            ch.destroy()

            if fnout!=None:
                exportPdf(self.fn,fnout,self.n_page,
                          self.sel_x,self.sel_y,
                          self.width-self.sel2_x,
                          self.height-self.sel2_y)

    def main(self):
        Gtk.main()


def exportPdf(fn,fnout,npage,left,top,right,bottom):
    os.system("clipdfx \"" + fn + "\" \"" + fnout + "\" " + str(npage) + " " 
              + str(left) + " " + str(top) + " " + str(right) + " " 
              + str(bottom))

if __name__ == '__main__':
    try:
        if len(sys.argv)==2:
            pop = Poprender()
            pop.main()
        else:
            print("Usage:")
            print(os.path.basename(sys.argv[0]) + " filename.pdf")
    except KeyboardInterrupt:
        __name__
